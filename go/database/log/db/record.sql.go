// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: record.sql

package log

import (
	"context"
)

const getAllCollectionsToCompact = `-- name: GetAllCollectionsToCompact :many
with summary as (
    select r.collection_id, r.id, r.timestamp, row_number() over(partition by r.collection_id order by r.id) as rank
    from record_log r, collection_position c
    where r.collection_id = c.collection_id
      and r.id>c.record_log_position
)
select collection_id, id, timestamp, rank from summary
where rank=1
order by timestamp
`

type GetAllCollectionsToCompactRow struct {
	CollectionID string
	ID           int64
	Timestamp    int32
	Rank         int64
}

func (q *Queries) GetAllCollectionsToCompact(ctx context.Context) ([]GetAllCollectionsToCompactRow, error) {
	rows, err := q.db.Query(ctx, getAllCollectionsToCompact)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCollectionsToCompactRow
	for rows.Next() {
		var i GetAllCollectionsToCompactRow
		if err := rows.Scan(
			&i.CollectionID,
			&i.ID,
			&i.Timestamp,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastRecordForCollection = `-- name: GetLastRecordForCollection :one
SELECT id
FROM record_log
WHERE collection_id = $1
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLastRecordForCollection(ctx context.Context, collectionID string) (int64, error) {
	row := q.db.QueryRow(ctx, getLastRecordForCollection, collectionID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getRecordsForCollection = `-- name: GetRecordsForCollection :many
SELECT id, collection_id, timestamp, record FROM record_log WHERE collection_id = $1 AND id > $2  ORDER BY id DESC limit $3
`

type GetRecordsForCollectionParams struct {
	CollectionID string
	ID           int64
	Limit        int32
}

func (q *Queries) GetRecordsForCollection(ctx context.Context, arg GetRecordsForCollectionParams) ([]RecordLog, error) {
	rows, err := q.db.Query(ctx, getRecordsForCollection, arg.CollectionID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecordLog
	for rows.Next() {
		var i RecordLog
		if err := rows.Scan(
			&i.ID,
			&i.CollectionID,
			&i.Timestamp,
			&i.Record,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertRecordParams struct {
	CollectionID string
	ID           int64
	Record       []byte
}

const upsertCollectionPosition = `-- name: UpsertCollectionPosition :exec
INSERT INTO collection_position (collection_id, record_log_position) values($1, $2)
ON CONFLICT (collection_id) DO UPDATE SET record_log_position = $2
`

type UpsertCollectionPositionParams struct {
	CollectionID      string
	RecordLogPosition int64
}

func (q *Queries) UpsertCollectionPosition(ctx context.Context, arg UpsertCollectionPositionParams) error {
	_, err := q.db.Exec(ctx, upsertCollectionPosition, arg.CollectionID, arg.RecordLogPosition)
	return err
}
