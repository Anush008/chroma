// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chroma-core/chroma/go/pkg/coordinator/ent/predicate"
	"github.com/chroma-core/chroma/go/pkg/coordinator/ent/testbase"
)

// TestBaseUpdate is the builder for updating TestBase entities.
type TestBaseUpdate struct {
	config
	hooks    []Hook
	mutation *TestBaseMutation
}

// Where appends a list predicates to the TestBaseUpdate builder.
func (tbu *TestBaseUpdate) Where(ps ...predicate.TestBase) *TestBaseUpdate {
	tbu.mutation.Where(ps...)
	return tbu
}

// Mutation returns the TestBaseMutation object of the builder.
func (tbu *TestBaseUpdate) Mutation() *TestBaseMutation {
	return tbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tbu *TestBaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tbu.sqlSave, tbu.mutation, tbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbu *TestBaseUpdate) SaveX(ctx context.Context) int {
	affected, err := tbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tbu *TestBaseUpdate) Exec(ctx context.Context) error {
	_, err := tbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbu *TestBaseUpdate) ExecX(ctx context.Context) {
	if err := tbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tbu *TestBaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(testbase.Table, testbase.Columns, sqlgraph.NewFieldSpec(testbase.FieldID, field.TypeInt))
	if ps := tbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tbu.mutation.done = true
	return n, nil
}

// TestBaseUpdateOne is the builder for updating a single TestBase entity.
type TestBaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestBaseMutation
}

// Mutation returns the TestBaseMutation object of the builder.
func (tbuo *TestBaseUpdateOne) Mutation() *TestBaseMutation {
	return tbuo.mutation
}

// Where appends a list predicates to the TestBaseUpdate builder.
func (tbuo *TestBaseUpdateOne) Where(ps ...predicate.TestBase) *TestBaseUpdateOne {
	tbuo.mutation.Where(ps...)
	return tbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tbuo *TestBaseUpdateOne) Select(field string, fields ...string) *TestBaseUpdateOne {
	tbuo.fields = append([]string{field}, fields...)
	return tbuo
}

// Save executes the query and returns the updated TestBase entity.
func (tbuo *TestBaseUpdateOne) Save(ctx context.Context) (*TestBase, error) {
	return withHooks(ctx, tbuo.sqlSave, tbuo.mutation, tbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbuo *TestBaseUpdateOne) SaveX(ctx context.Context) *TestBase {
	node, err := tbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tbuo *TestBaseUpdateOne) Exec(ctx context.Context) error {
	_, err := tbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbuo *TestBaseUpdateOne) ExecX(ctx context.Context) {
	if err := tbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tbuo *TestBaseUpdateOne) sqlSave(ctx context.Context) (_node *TestBase, err error) {
	_spec := sqlgraph.NewUpdateSpec(testbase.Table, testbase.Columns, sqlgraph.NewFieldSpec(testbase.FieldID, field.TypeInt))
	id, ok := tbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestBase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testbase.FieldID)
		for _, f := range fields {
			if !testbase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testbase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &TestBase{config: tbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tbuo.mutation.done = true
	return _node, nil
}
