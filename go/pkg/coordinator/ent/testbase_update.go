// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chroma-core/chroma/go/pkg/coordinator/ent/predicate"
	"github.com/chroma-core/chroma/go/pkg/coordinator/ent/testbase"
)

// TestBaseUpdate is the builder for updating TestBase entities.
type TestBaseUpdate struct {
	config
	hooks    []Hook
	mutation *TestBaseMutation
}

// Where appends a list predicates to the TestBaseUpdate builder.
func (tbu *TestBaseUpdate) Where(ps ...predicate.TestBase) *TestBaseUpdate {
	tbu.mutation.Where(ps...)
	return tbu
}

// SetName sets the "name" field.
func (tbu *TestBaseUpdate) SetName(s string) *TestBaseUpdate {
	tbu.mutation.SetName(s)
	return tbu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tbu *TestBaseUpdate) SetNillableName(s *string) *TestBaseUpdate {
	if s != nil {
		tbu.SetName(*s)
	}
	return tbu
}

// ClearName clears the value of the "name" field.
func (tbu *TestBaseUpdate) ClearName() *TestBaseUpdate {
	tbu.mutation.ClearName()
	return tbu
}

// SetUpdatedAt sets the "updated_at" field.
func (tbu *TestBaseUpdate) SetUpdatedAt(i int64) *TestBaseUpdate {
	tbu.mutation.ResetUpdatedAt()
	tbu.mutation.SetUpdatedAt(i)
	return tbu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tbu *TestBaseUpdate) AddUpdatedAt(i int64) *TestBaseUpdate {
	tbu.mutation.AddUpdatedAt(i)
	return tbu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tbu *TestBaseUpdate) ClearUpdatedAt() *TestBaseUpdate {
	tbu.mutation.ClearUpdatedAt()
	return tbu
}

// SetDeletedAt sets the "deleted_at" field.
func (tbu *TestBaseUpdate) SetDeletedAt(i int64) *TestBaseUpdate {
	tbu.mutation.ResetDeletedAt()
	tbu.mutation.SetDeletedAt(i)
	return tbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tbu *TestBaseUpdate) SetNillableDeletedAt(i *int64) *TestBaseUpdate {
	if i != nil {
		tbu.SetDeletedAt(*i)
	}
	return tbu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (tbu *TestBaseUpdate) AddDeletedAt(i int64) *TestBaseUpdate {
	tbu.mutation.AddDeletedAt(i)
	return tbu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tbu *TestBaseUpdate) ClearDeletedAt() *TestBaseUpdate {
	tbu.mutation.ClearDeletedAt()
	return tbu
}

// SetVersion sets the "version" field.
func (tbu *TestBaseUpdate) SetVersion(i int) *TestBaseUpdate {
	tbu.mutation.ResetVersion()
	tbu.mutation.SetVersion(i)
	return tbu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tbu *TestBaseUpdate) SetNillableVersion(i *int) *TestBaseUpdate {
	if i != nil {
		tbu.SetVersion(*i)
	}
	return tbu
}

// AddVersion adds i to the "version" field.
func (tbu *TestBaseUpdate) AddVersion(i int) *TestBaseUpdate {
	tbu.mutation.AddVersion(i)
	return tbu
}

// ClearVersion clears the value of the "version" field.
func (tbu *TestBaseUpdate) ClearVersion() *TestBaseUpdate {
	tbu.mutation.ClearVersion()
	return tbu
}

// SetText sets the "text" field.
func (tbu *TestBaseUpdate) SetText(s string) *TestBaseUpdate {
	tbu.mutation.SetText(s)
	return tbu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tbu *TestBaseUpdate) SetNillableText(s *string) *TestBaseUpdate {
	if s != nil {
		tbu.SetText(*s)
	}
	return tbu
}

// ClearText clears the value of the "text" field.
func (tbu *TestBaseUpdate) ClearText() *TestBaseUpdate {
	tbu.mutation.ClearText()
	return tbu
}

// Mutation returns the TestBaseMutation object of the builder.
func (tbu *TestBaseUpdate) Mutation() *TestBaseMutation {
	return tbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tbu *TestBaseUpdate) Save(ctx context.Context) (int, error) {
	tbu.defaults()
	return withHooks(ctx, tbu.sqlSave, tbu.mutation, tbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbu *TestBaseUpdate) SaveX(ctx context.Context) int {
	affected, err := tbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tbu *TestBaseUpdate) Exec(ctx context.Context) error {
	_, err := tbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbu *TestBaseUpdate) ExecX(ctx context.Context) {
	if err := tbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tbu *TestBaseUpdate) defaults() {
	if _, ok := tbu.mutation.UpdatedAt(); !ok && !tbu.mutation.UpdatedAtCleared() {
		v := testbase.UpdateDefaultUpdatedAt()
		tbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tbu *TestBaseUpdate) check() error {
	if v, ok := tbu.mutation.Name(); ok {
		if err := testbase.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TestBase.name": %w`, err)}
		}
	}
	if v, ok := tbu.mutation.Text(); ok {
		if err := testbase.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "TestBase.text": %w`, err)}
		}
	}
	return nil
}

func (tbu *TestBaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testbase.Table, testbase.Columns, sqlgraph.NewFieldSpec(testbase.FieldID, field.TypeUUID))
	if ps := tbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tbu.mutation.ParentIDCleared() {
		_spec.ClearField(testbase.FieldParentID, field.TypeUUID)
	}
	if value, ok := tbu.mutation.Name(); ok {
		_spec.SetField(testbase.FieldName, field.TypeString, value)
	}
	if tbu.mutation.NameCleared() {
		_spec.ClearField(testbase.FieldName, field.TypeString)
	}
	if tbu.mutation.CreatedAtCleared() {
		_spec.ClearField(testbase.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tbu.mutation.UpdatedAt(); ok {
		_spec.SetField(testbase.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tbu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(testbase.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tbu.mutation.UpdatedAtCleared() {
		_spec.ClearField(testbase.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tbu.mutation.DeletedAt(); ok {
		_spec.SetField(testbase.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := tbu.mutation.AddedDeletedAt(); ok {
		_spec.AddField(testbase.FieldDeletedAt, field.TypeInt64, value)
	}
	if tbu.mutation.DeletedAtCleared() {
		_spec.ClearField(testbase.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := tbu.mutation.Version(); ok {
		_spec.SetField(testbase.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tbu.mutation.AddedVersion(); ok {
		_spec.AddField(testbase.FieldVersion, field.TypeInt, value)
	}
	if tbu.mutation.VersionCleared() {
		_spec.ClearField(testbase.FieldVersion, field.TypeInt)
	}
	if value, ok := tbu.mutation.Text(); ok {
		_spec.SetField(testbase.FieldText, field.TypeString, value)
	}
	if tbu.mutation.TextCleared() {
		_spec.ClearField(testbase.FieldText, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tbu.mutation.done = true
	return n, nil
}

// TestBaseUpdateOne is the builder for updating a single TestBase entity.
type TestBaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestBaseMutation
}

// SetName sets the "name" field.
func (tbuo *TestBaseUpdateOne) SetName(s string) *TestBaseUpdateOne {
	tbuo.mutation.SetName(s)
	return tbuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tbuo *TestBaseUpdateOne) SetNillableName(s *string) *TestBaseUpdateOne {
	if s != nil {
		tbuo.SetName(*s)
	}
	return tbuo
}

// ClearName clears the value of the "name" field.
func (tbuo *TestBaseUpdateOne) ClearName() *TestBaseUpdateOne {
	tbuo.mutation.ClearName()
	return tbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tbuo *TestBaseUpdateOne) SetUpdatedAt(i int64) *TestBaseUpdateOne {
	tbuo.mutation.ResetUpdatedAt()
	tbuo.mutation.SetUpdatedAt(i)
	return tbuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (tbuo *TestBaseUpdateOne) AddUpdatedAt(i int64) *TestBaseUpdateOne {
	tbuo.mutation.AddUpdatedAt(i)
	return tbuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tbuo *TestBaseUpdateOne) ClearUpdatedAt() *TestBaseUpdateOne {
	tbuo.mutation.ClearUpdatedAt()
	return tbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tbuo *TestBaseUpdateOne) SetDeletedAt(i int64) *TestBaseUpdateOne {
	tbuo.mutation.ResetDeletedAt()
	tbuo.mutation.SetDeletedAt(i)
	return tbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tbuo *TestBaseUpdateOne) SetNillableDeletedAt(i *int64) *TestBaseUpdateOne {
	if i != nil {
		tbuo.SetDeletedAt(*i)
	}
	return tbuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (tbuo *TestBaseUpdateOne) AddDeletedAt(i int64) *TestBaseUpdateOne {
	tbuo.mutation.AddDeletedAt(i)
	return tbuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tbuo *TestBaseUpdateOne) ClearDeletedAt() *TestBaseUpdateOne {
	tbuo.mutation.ClearDeletedAt()
	return tbuo
}

// SetVersion sets the "version" field.
func (tbuo *TestBaseUpdateOne) SetVersion(i int) *TestBaseUpdateOne {
	tbuo.mutation.ResetVersion()
	tbuo.mutation.SetVersion(i)
	return tbuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tbuo *TestBaseUpdateOne) SetNillableVersion(i *int) *TestBaseUpdateOne {
	if i != nil {
		tbuo.SetVersion(*i)
	}
	return tbuo
}

// AddVersion adds i to the "version" field.
func (tbuo *TestBaseUpdateOne) AddVersion(i int) *TestBaseUpdateOne {
	tbuo.mutation.AddVersion(i)
	return tbuo
}

// ClearVersion clears the value of the "version" field.
func (tbuo *TestBaseUpdateOne) ClearVersion() *TestBaseUpdateOne {
	tbuo.mutation.ClearVersion()
	return tbuo
}

// SetText sets the "text" field.
func (tbuo *TestBaseUpdateOne) SetText(s string) *TestBaseUpdateOne {
	tbuo.mutation.SetText(s)
	return tbuo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tbuo *TestBaseUpdateOne) SetNillableText(s *string) *TestBaseUpdateOne {
	if s != nil {
		tbuo.SetText(*s)
	}
	return tbuo
}

// ClearText clears the value of the "text" field.
func (tbuo *TestBaseUpdateOne) ClearText() *TestBaseUpdateOne {
	tbuo.mutation.ClearText()
	return tbuo
}

// Mutation returns the TestBaseMutation object of the builder.
func (tbuo *TestBaseUpdateOne) Mutation() *TestBaseMutation {
	return tbuo.mutation
}

// Where appends a list predicates to the TestBaseUpdate builder.
func (tbuo *TestBaseUpdateOne) Where(ps ...predicate.TestBase) *TestBaseUpdateOne {
	tbuo.mutation.Where(ps...)
	return tbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tbuo *TestBaseUpdateOne) Select(field string, fields ...string) *TestBaseUpdateOne {
	tbuo.fields = append([]string{field}, fields...)
	return tbuo
}

// Save executes the query and returns the updated TestBase entity.
func (tbuo *TestBaseUpdateOne) Save(ctx context.Context) (*TestBase, error) {
	tbuo.defaults()
	return withHooks(ctx, tbuo.sqlSave, tbuo.mutation, tbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbuo *TestBaseUpdateOne) SaveX(ctx context.Context) *TestBase {
	node, err := tbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tbuo *TestBaseUpdateOne) Exec(ctx context.Context) error {
	_, err := tbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbuo *TestBaseUpdateOne) ExecX(ctx context.Context) {
	if err := tbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tbuo *TestBaseUpdateOne) defaults() {
	if _, ok := tbuo.mutation.UpdatedAt(); !ok && !tbuo.mutation.UpdatedAtCleared() {
		v := testbase.UpdateDefaultUpdatedAt()
		tbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tbuo *TestBaseUpdateOne) check() error {
	if v, ok := tbuo.mutation.Name(); ok {
		if err := testbase.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TestBase.name": %w`, err)}
		}
	}
	if v, ok := tbuo.mutation.Text(); ok {
		if err := testbase.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "TestBase.text": %w`, err)}
		}
	}
	return nil
}

func (tbuo *TestBaseUpdateOne) sqlSave(ctx context.Context) (_node *TestBase, err error) {
	if err := tbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testbase.Table, testbase.Columns, sqlgraph.NewFieldSpec(testbase.FieldID, field.TypeUUID))
	id, ok := tbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestBase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testbase.FieldID)
		for _, f := range fields {
			if !testbase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testbase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tbuo.mutation.ParentIDCleared() {
		_spec.ClearField(testbase.FieldParentID, field.TypeUUID)
	}
	if value, ok := tbuo.mutation.Name(); ok {
		_spec.SetField(testbase.FieldName, field.TypeString, value)
	}
	if tbuo.mutation.NameCleared() {
		_spec.ClearField(testbase.FieldName, field.TypeString)
	}
	if tbuo.mutation.CreatedAtCleared() {
		_spec.ClearField(testbase.FieldCreatedAt, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testbase.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := tbuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(testbase.FieldUpdatedAt, field.TypeInt64, value)
	}
	if tbuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(testbase.FieldUpdatedAt, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.DeletedAt(); ok {
		_spec.SetField(testbase.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := tbuo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(testbase.FieldDeletedAt, field.TypeInt64, value)
	}
	if tbuo.mutation.DeletedAtCleared() {
		_spec.ClearField(testbase.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := tbuo.mutation.Version(); ok {
		_spec.SetField(testbase.FieldVersion, field.TypeInt, value)
	}
	if value, ok := tbuo.mutation.AddedVersion(); ok {
		_spec.AddField(testbase.FieldVersion, field.TypeInt, value)
	}
	if tbuo.mutation.VersionCleared() {
		_spec.ClearField(testbase.FieldVersion, field.TypeInt)
	}
	if value, ok := tbuo.mutation.Text(); ok {
		_spec.SetField(testbase.FieldText, field.TypeString, value)
	}
	if tbuo.mutation.TextCleared() {
		_spec.ClearField(testbase.FieldText, field.TypeString)
	}
	_node = &TestBase{config: tbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testbase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tbuo.mutation.done = true
	return _node, nil
}
