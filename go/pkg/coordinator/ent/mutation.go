// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chroma-core/chroma/go/pkg/coordinator/ent/predicate"
	"github.com/chroma-core/chroma/go/pkg/coordinator/ent/testbase"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTestBase = "TestBase"
)

// TestBaseMutation represents an operation that mutates the TestBase nodes in the graph.
type TestBaseMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	parent_id     *uuid.UUID
	name          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	version       *int
	addversion    *int
	text          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TestBase, error)
	predicates    []predicate.TestBase
}

var _ ent.Mutation = (*TestBaseMutation)(nil)

// testbaseOption allows management of the mutation configuration using functional options.
type testbaseOption func(*TestBaseMutation)

// newTestBaseMutation creates new mutation for the TestBase entity.
func newTestBaseMutation(c config, op Op, opts ...testbaseOption) *TestBaseMutation {
	m := &TestBaseMutation{
		config:        c,
		op:            op,
		typ:           TypeTestBase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTestBaseID sets the ID field of the mutation.
func withTestBaseID(id uuid.UUID) testbaseOption {
	return func(m *TestBaseMutation) {
		var (
			err   error
			once  sync.Once
			value *TestBase
		)
		m.oldValue = func(ctx context.Context) (*TestBase, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TestBase.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTestBase sets the old TestBase of the mutation.
func withTestBase(node *TestBase) testbaseOption {
	return func(m *TestBaseMutation) {
		m.oldValue = func(context.Context) (*TestBase, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TestBaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TestBaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TestBase entities.
func (m *TestBaseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TestBaseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TestBaseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TestBase.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetParentID sets the "parent_id" field.
func (m *TestBaseMutation) SetParentID(u uuid.UUID) {
	m.parent_id = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *TestBaseMutation) ParentID() (r uuid.UUID, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the TestBase entity.
// If the TestBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestBaseMutation) OldParentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *TestBaseMutation) ResetParentID() {
	m.parent_id = nil
}

// SetName sets the "name" field.
func (m *TestBaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TestBaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TestBase entity.
// If the TestBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestBaseMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TestBaseMutation) ClearName() {
	m.name = nil
	m.clearedFields[testbase.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TestBaseMutation) NameCleared() bool {
	_, ok := m.clearedFields[testbase.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TestBaseMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, testbase.FieldName)
}

// SetCreatedAt sets the "created_at" field.
func (m *TestBaseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TestBaseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TestBase entity.
// If the TestBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestBaseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TestBaseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TestBaseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TestBaseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TestBase entity.
// If the TestBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestBaseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TestBaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TestBaseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TestBaseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TestBase entity.
// If the TestBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestBaseMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TestBaseMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[testbase.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TestBaseMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[testbase.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TestBaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, testbase.FieldDeletedAt)
}

// SetVersion sets the "version" field.
func (m *TestBaseMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *TestBaseMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the TestBase entity.
// If the TestBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestBaseMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *TestBaseMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *TestBaseMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *TestBaseMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetText sets the "text" field.
func (m *TestBaseMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *TestBaseMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the TestBase entity.
// If the TestBase object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TestBaseMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ClearText clears the value of the "text" field.
func (m *TestBaseMutation) ClearText() {
	m.text = nil
	m.clearedFields[testbase.FieldText] = struct{}{}
}

// TextCleared returns if the "text" field was cleared in this mutation.
func (m *TestBaseMutation) TextCleared() bool {
	_, ok := m.clearedFields[testbase.FieldText]
	return ok
}

// ResetText resets all changes to the "text" field.
func (m *TestBaseMutation) ResetText() {
	m.text = nil
	delete(m.clearedFields, testbase.FieldText)
}

// Where appends a list predicates to the TestBaseMutation builder.
func (m *TestBaseMutation) Where(ps ...predicate.TestBase) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TestBaseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TestBaseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TestBase, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TestBaseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TestBaseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TestBase).
func (m *TestBaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TestBaseMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.parent_id != nil {
		fields = append(fields, testbase.FieldParentID)
	}
	if m.name != nil {
		fields = append(fields, testbase.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, testbase.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, testbase.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, testbase.FieldDeletedAt)
	}
	if m.version != nil {
		fields = append(fields, testbase.FieldVersion)
	}
	if m.text != nil {
		fields = append(fields, testbase.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TestBaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case testbase.FieldParentID:
		return m.ParentID()
	case testbase.FieldName:
		return m.Name()
	case testbase.FieldCreatedAt:
		return m.CreatedAt()
	case testbase.FieldUpdatedAt:
		return m.UpdatedAt()
	case testbase.FieldDeletedAt:
		return m.DeletedAt()
	case testbase.FieldVersion:
		return m.Version()
	case testbase.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TestBaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case testbase.FieldParentID:
		return m.OldParentID(ctx)
	case testbase.FieldName:
		return m.OldName(ctx)
	case testbase.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case testbase.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case testbase.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case testbase.FieldVersion:
		return m.OldVersion(ctx)
	case testbase.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown TestBase field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestBaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case testbase.FieldParentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case testbase.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case testbase.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case testbase.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case testbase.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case testbase.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case testbase.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown TestBase field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TestBaseMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, testbase.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TestBaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case testbase.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TestBaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case testbase.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown TestBase numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TestBaseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(testbase.FieldName) {
		fields = append(fields, testbase.FieldName)
	}
	if m.FieldCleared(testbase.FieldDeletedAt) {
		fields = append(fields, testbase.FieldDeletedAt)
	}
	if m.FieldCleared(testbase.FieldText) {
		fields = append(fields, testbase.FieldText)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TestBaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TestBaseMutation) ClearField(name string) error {
	switch name {
	case testbase.FieldName:
		m.ClearName()
		return nil
	case testbase.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case testbase.FieldText:
		m.ClearText()
		return nil
	}
	return fmt.Errorf("unknown TestBase nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TestBaseMutation) ResetField(name string) error {
	switch name {
	case testbase.FieldParentID:
		m.ResetParentID()
		return nil
	case testbase.FieldName:
		m.ResetName()
		return nil
	case testbase.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case testbase.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case testbase.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case testbase.FieldVersion:
		m.ResetVersion()
		return nil
	case testbase.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown TestBase field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TestBaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TestBaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TestBaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TestBaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TestBaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TestBaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TestBaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TestBase unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TestBaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TestBase edge %s", name)
}
