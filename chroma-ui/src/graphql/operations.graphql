## Base Types
##   Not all types, queries, and mutations are listed here
##   These are *mostly* only the things we need to use nicely on the frontend
##   Some queries are still "hand typed" like in Embeddings.tsx

# Project
fragment ProjectFields on Project {
  id
  name
}

query getProjects {
  projects {
    ...ProjectFields
  }
}

query getProject($id: ID!) {
  project(id: $id) {
    ...ProjectFields
  }
}

# Job
fragment JobFields on Job {
  id
}

query getJobs {
  jobs {
    ...JobFields
  }
}

query getJob($id: ID!) {
  job(id: $id) {
    ...JobFields
  }
}

# Projection
fragment ProjectionFields on Projection {
  id
  x
  y
}

query getProjections {
  projections {
    ...ProjectionFields
  }
}

query getProjection($id: ID!) {
  projection(id: $id) {
    ...ProjectionFields
  }
}

input ProjectionInput {
  x: Float
  y: Float
  projectionSetId: Int
  embeddingId: Int
}

mutation AddProjection($projectionInput: ProjectionInput!) {
  addProjection(projectionInput: $projectionInput) {
      __typename
    ... on Projection {
      __typename
      ...ProjectionFields
    }
  }
}

# ProjectionSet
fragment ProjectionSetFields on ProjectionSet {
  id
  projections {
    id
    x
    y
  }
}


# query getProjectionSets {
#   projectionSets {
#     ...ProjectionSetFields
#   }
# }

input ProjectionSetInput {
  embeddingSetId: Int
}

mutation AddProjectionSet($projectionSetInput: ProjectionSetInput!) {
  addProjectionSet(projectionSetInput: $projectionSetInput) {
    __typename
    ... on ProjectionSet {
      __typename
      ...ProjectionSetFields
    }
  }
}

# Embeddings
fragment EmbeddingFields on Embedding {
  id
  data
}

query getEmbeddings {
  embeddings {
    ...EmbeddingFields
  }
}

query getEmbedding($id: ID!) {
  embedding(id: $id) {
    ...EmbeddingFields
  }
}

input PageInput {
  first: Int
  after: String
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

fragment PageInfoFields on PageInfo {
  hasNextPage
  hasPreviousPage
  startCursor
  endCursor
}

query embeddingsByPage ($pageInput: PageInput!) {
    embeddingsByPage(pageInput: $pageInput) {
        pageInfo {
          ...PageInfoFields
        }
        edges {
            node {
                id
                data
            }
            cursor
        }
    }
}

# input EmbeddingInput {
#   data: String
#   inferenceIdentifier: String
#   label: String
#   inputIdentifier: String
#   embeddingSetId: Int
# }

# input EmbeddingsInput {
#     embeddings: [EmbeddingInput!]! 
# }

# mutation AddEmbedding($embeddingInput: EmbeddingInput!) {
#   addEmbedding(embeddingInput: $embeddingInput) {
#     __typename
#     ... on EmbeddingExists {
#       __typename
#       message
#     }
#     ... on Embedding {
#       __typename
#       ...EmbeddingFields
#     }
#   }
# }

# EmbeddingSet
# fragment EmbeddingSetFields on EmbeddingSet {
#   id
# }

# query getEmbeddingSets {
#   embeddingSets {
#     ...EmbeddingSetFields
#   }
# }

# query getEmbeddingSet($id: ID!) {
#   embeddingSet(id: $id) {
#     ...EmbeddingSetFields
#   }
# }

# leave in as part of subscription example
# subscription getCounter {
#   count(target: 50)
# }

mutation appendTagByNameToDatapoints($tagName: String!, $datapointIds: [Int!], $target: [String!]) {
	appendTagByNameToDatapoints(data: {
		tagName: $tagName, datapointIds: $datapointIds, target: $target
	} ) {
		id
		tags {
			id
			name
		}
	}
}

mutation removeTagFromDatapoints($tagName: String!, $datapointIds: [Int!], $target: [String!]) {
	removeTagFromDatapoints(data: {
		tagName: $tagName, datapointIds: $datapointIds, target: $target
	} ) {
		... on ObjectDeleted {
      message
    }
	}
}