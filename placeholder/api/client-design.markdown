# Chroma Client Design

## Overview

Proposing a python (other languages in the future) client design.  This code will rely on the HTTP service, but should generally hide that from the user.

## Embedding sets

Embeddings can only be compared with other embeddings from the same set.  Where set is defined normally by:

MODEL + VERSION + LAYER

However, those identifiers are so user-specific, and potentially fluid, that for now we'll treat them as an opaque combined key.  As long as the user calls log with exactly the same dict, we'll treat it as the same set.

Rather than assign a new UUID and require a lookup to find the set ID, we can carefully combine those parts into a string, and use a hexified computed hash (e.g. sha-1) as the ID.

We'll still record the raw strings, but can use the computed ID to route embeddings without a central lookup.

## Global chroma.log()

The global log() call is comprehensive.  Other methods of logging below can optionally streamline our code integration.

However, encouraging the use of `TrainingSession()` and `QuerySession()` can also head off issues with global state, and reinforce the different modes for our users.

```python
import chroma

chroma.log(
    chroma_config="", # default: ./chroma.json
    chroma_json="", # chroma.json contents as a string
    chroma_server_url="", # default: http://log.trychroma.com/v1
    api_key="", # default chroma.json
    input_uri="/images/123.png", # opaque ID for chroma, meaningful to user
    embedding_set={
        model="user-exp-abc",
        model_version="123",
        layer="context"
    },
    training_mode=True,
)
```

## Batching

We could encourage this for a few reasons:

1. We don't get hit with a bunch of partial log runs when client code is crashing midway
2. Better compression
3. Can help clarify for the user the training/prod separation

Store in simple json, compress/convert on upload/save

We would make it very clear that we're not storing until `save()` is called.

```python
import chroma

session = chroma.TrainingSession(
    embedding_set={
        model="user-exp-abc",
        model_version="123",
        layer="context"
    }
)
session.bufferlocal(
    file="/tmp/chroma-$model-$layer-$timestamp.jsonl',
)
session.log(
    input_uri="/images/123.png",
    embedding=RECORDED_FROM_TORCH,
    inferences=SERIALIZABLE_DICTS
)
session.save()
```

## Commandline

Future, but maybe not very far?

Examples:

Upload a batch that was created on another machine.

```shell
> python3 -m chroma upload-training /tmp/chroma-image-context-2022-10-18T16:34:28.614077.jsonl
```



```shell
> python3 -m chroma should-upload -embedding_set=<UUID> <BASE64_EMBEDDING>
{
    "recommendation": "not_useful"
}
```


## Static config

Support initializing chroma with known values in `chroma.json` for easy tracking.  This includes overridable defaults that can be omitted such as `chroma_url`.

```json
{
    "api_key":"secret-456",
    "application_id":"Customer-123",
    "chroma_url":"http://other-location/v2",
    "http_proxy":"" # required in some environments
}
```

## Training embeddings vs production

This difference has huge implications for our processing of an embedding.  We want to keep that simple for the user, but it's important not to confuse them.

## TrainingSession

For unchanging attributes of a `log()` call, e.g. `model_version` we can initialize a session object.  Subsequent calls inherit config from the session.

```python
session = chroma.TrainingSession()
session.log(

)
```

## QuerySession

Unlike `TrainingSession`, calls to `log()` return chroma answers about this embedding.

```python
session = chroma.QuerySession()
result = session.log(

)
if result.training_recommended:
    # Call user service with result.input_uri 

if result.not_useful:
    # do not store

```

### QueryResult

Chroma recommendations about this embedding, based on its relationship with the training data.

| Field | Type | Description |
| ----------- | ----------- | ----------- |
| input_uri | URL | as passed from log() |
| recommendations | list of strings | tags generated by Chroma |
| training_recommended | Bool | helper, based on recommendations |
| not_useful | Bool | helper, based on recommendations |
